// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----- Enums -----

enum UserRole {
  USER
  ADMIN
  ADMIN_VIEWER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum ChannelStatus {
  ACTIVE
  REVOKED
  ERROR
}

enum JobStatus {
  QUEUED
  RUNNING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum WebhookStatus {
  RECEIVED
  PROCESSED
  FAILED
}

// ----- Core domain models -----

model Plan {
  id                   String   @id @default(uuid())
  slug                 String   @unique
  channelLimit         Int
  uploadQuota          Int
  videoQuota           Int?     // Optional: separate video upload limit
  podcastQuota         Int?     // Optional: separate podcast upload limit
  priceCents           Int
  billingInterval      String
  stripePriceId        String?  // Monthly price ID
  stripeAnnualPriceId  String?  // Annual price ID (for 2 months free discount)
  hasWatermark         Boolean  @default(false) // True for Free tier
  features             Json?    // Feature flags (localization level, AI optimization, etc)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  users                User[]
}

model User {
  id               String      @id @default(uuid())
  email            String      @unique
  name             String?
  passwordHash     String?
  oauthProvider    String?
  oauthProviderId  String?
  stripeCustomerId String?
  role             UserRole    @default(USER)
  status           UserStatus  @default(ACTIVE)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  planId           String?
  plan             Plan?       @relation(fields: [planId], references: [id], onDelete: SetNull)
  channels         Channel[]
  jobs             Job[]
  usages           PlanUsage[]
  passwordResetTokens PasswordResetToken[]

  @@index([planId])
}

model Channel {
  id                    String        @id @default(uuid())
  userId                String
  provider              String
  providerChannelId     String
  displayName           String
  metaJson              Json?
  encryptedRefreshToken String?
  tokenUpdatedAt        DateTime?
  connectedAt           DateTime      @default(now())
  lastSyncedAt          DateTime?
  status                ChannelStatus @default(ACTIVE)

  // Relations
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs                  Job[]

  @@unique([userId, provider, providerChannelId])
  @@index([userId])
}

model Job {
  id            String    @id @default(uuid())
  userId        String
  channelId     String
  assetId       String?
  title         String
  description   String?
  platform      String
  scheduledAt   DateTime
  startedAt     DateTime?
  finishedAt    DateTime?
  status        JobStatus @default(QUEUED)
  progress      Int       @default(0)
  logsJson      Json?
  idempotencyKey String?  @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel       Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([status, scheduledAt])
  @@index([channelId, status])
}

// ----- Supporting models -----

model PlanUsage {
  id            String   @id @default(uuid())
  userId        String
  periodStart   DateTime
  periodEnd     DateTime
  uploadsUsed   Int      @default(0)
  videosUsed    Int      @default(0)  // Track video uploads separately
  podcastsUsed  Int      @default(0)  // Track podcast uploads separately
  channelsUsed  Int      @default(0)
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, periodStart, periodEnd])
  @@index([userId])
}

model WebhookEvent {
  id           String        @id @default(uuid())
  source       String
  eventId      String
  status       WebhookStatus @default(RECEIVED)
  payload      Json
  processedAt  DateTime?
  errorMessage String?
  createdAt    DateTime      @default(now())

  @@unique([source, eventId])
}

// Password reset tokens with short TTL to support forgot-password flow
model PasswordResetToken {
  id         String   @id @default(uuid())
  userId     String
  tokenHash  String   // store a hash of the token, not the raw value
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  usedAt     DateTime?

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}


